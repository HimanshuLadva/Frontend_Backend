// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebsiteCMS.DAL.Data.Models;

#nullable disable

namespace WebsiteCMS.DAL.Migrations
{
    [DbContext(typeof(WebsiteCMSDbContext))]
    [Migration("20230320062129_init2")]
    partial class init2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTAPILogs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ExceptionMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblBOTAPILogs");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTAvatar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblBOTAvatar");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTChatBot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("tblBOTChatBot");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("DefaultQuestion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblBOTComponent");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ChatBotId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsBotMessage")
                        .HasColumnType("bit");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reply")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("VisitorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChatBotId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("VisitorId");

                    b.ToTable("tblBOTHistory");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTImageOrFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FrontendId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageOrFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblBOTImagesOrFile");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("tblBOTOption");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTPlatform", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ChatBotId")
                        .HasColumnType("bigint");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChatBotId");

                    b.ToTable("tblBOTPlatform");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ChatBotId")
                        .HasColumnType("bigint");

                    b.Property<long>("ComponentTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("FrontendId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLeadMessage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSkippable")
                        .HasColumnType("bit");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Sequence")
                        .HasColumnType("bigint");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChatBotId");

                    b.HasIndex("ComponentTypeId");

                    b.ToTable("tblBOTQuestion");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTQuestionLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LinkTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("tblBOTQuestionLink");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTVisitor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VisitorUUId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VisitorUUId")
                        .IsUnique();

                    b.ToTable("tblBOTVisitor");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTWebHookResponse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("BOTVisitorsId")
                        .HasColumnType("bigint");

                    b.Property<string>("BussinessId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BOTVisitorsId")
                        .IsUnique();

                    b.ToTable("tblBOTWebHookResponse");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTWhatsAppBusinessData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("BusinessId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ChatBotId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhNoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WAToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("errorMessageID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChatBotId");

                    b.ToTable("tblBOTWhatsAppBusinessData");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTWhatsAppTemplateRegisterIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Issue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblBOTWhatsApptemplateRegisterIssus");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTWhatsAppTemplates", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<string>("WhatsAppTemplateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsAppTemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("tblBOTWhatsAppTemplates");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTWhatsAppTemplatesStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsAppTemplateId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblBOTWhatsAppTemplatesStatus");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BusinessCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblBusinessCategorys");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BusinessContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BusinessInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessInfoId")
                        .IsUnique();

                    b.ToTable("tblBusinessContactInfo");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BusinessInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BusinessName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TypeOfService")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblBusinessInfo");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BusinessInfoCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BusinessCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("BusinessInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BusinessCategoryId");

                    b.HasIndex("BusinessInfoId");

                    b.ToTable("tblBusinessInfoCategorys");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BusinessLocationInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BusinessInfoId")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddressLine3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessInfoId")
                        .IsUnique();

                    b.ToTable("tblBusinessLocationInfo");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BusinessPhoneNos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContactInfoId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactInfoId");

                    b.ToTable("tblBusinessPhoneNos");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BusinessServiceArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BusinessInfoId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessInfoId");

                    b.ToTable("tblBusinessServiceArea");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountriesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountriesId");

                    b.HasIndex("StatesId");

                    b.ToTable("tblCity");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.Countries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblCountry");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.FacebookPagesTokens", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Access_token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Birthday")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectedInstagramAccount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cover")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FollowersCount")
                        .HasColumnType("int");

                    b.Property<int?>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PageId")
                        .HasColumnType("bigint");

                    b.Property<string>("PageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SingleLineAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SocialId")
                        .HasColumnType("bigint");

                    b.Property<int>("SocialPlatformsId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsappNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SocialPlatformsId");

                    b.ToTable("tblFacebookPagesTokens");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMAlign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblSCRMAlign");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMCaptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SCRMCategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("SCRMSubCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SCRMCategoryID");

                    b.HasIndex("SCRMSubCategoryId");

                    b.ToTable("tblSCRMCaptions");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblSCRMCategory");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblSCRMColor");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMFontFamily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblSCRMFontFamily");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblSCRMLanguage");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCategoryImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("tblSCRMSubCategory");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblSCRMTag");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PremiumTemplateImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PremiumTemplatePreviewImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicTemplateImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublicTemplatePreviewImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("LanguageId");

                    b.ToTable("tblSCRMTemplate");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplateCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TemplateId");

                    b.ToTable("tblSCRMTemplateCategory");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplateField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemplateFieldTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TemplateFieldTypeId");

                    b.ToTable("tblSCRMTemplateField");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplateFieldImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<bool>("IsDisplay")
                        .HasColumnType("bit");

                    b.Property<int>("TemplateFieldId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.Property<double>("X")
                        .HasColumnType("float");

                    b.Property<double>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("TemplateFieldId");

                    b.HasIndex("TemplateId");

                    b.ToTable("tblSCRMTemplateFieldImage");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplateFieldText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AlignId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FontFamilyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDisplay")
                        .HasColumnType("bit");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("TemplateFieldId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<double>("X")
                        .HasColumnType("float");

                    b.Property<double>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AlignId");

                    b.HasIndex("FontFamilyId");

                    b.HasIndex("TemplateFieldId");

                    b.HasIndex("TemplateId");

                    b.ToTable("tblSCRMTemplateFieldText");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplateFieldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tblSCRMTemplateFieldType");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplateSubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("TemplateId");

                    b.ToTable("tblSCRMTemplateSubCategory");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplateTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("TemplateId");

                    b.ToTable("tblSCRMTemplateTag");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMUserCategoryList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FBTokenId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FBTokenId");

                    b.ToTable("tblSCRMUserCategoryList");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMUserMetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TemplateFieldId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TemplateFieldId");

                    b.ToTable("tblSCRMUserMetaData");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SocialPlateformWisePosts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("PageId")
                        .HasColumnType("int");

                    b.Property<int>("Plateformid")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("Plateformid");

                    b.HasIndex("PostId");

                    b.ToTable("tblSocialPlateformWisePosts");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SocialPlatforms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblSocialPlatforms");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SociaMediaPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblSociaMediaPost");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.States", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("tblState");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSCatalog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Colour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FBProductCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleProductCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ItemGroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pattern")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuantityToSell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SellPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shipping")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingWeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblWCMSCatalog");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSCategoryWiseProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("tblWCMSCategoryWiseProducts");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSFieldsMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FieldtypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOptional")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUserVisible")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MasterTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewSelector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Selector")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Syntax")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FieldtypeId");

                    b.HasIndex("MasterTypeId");

                    b.ToTable("tblWCMSFieldsMasters");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSFieldsMasterChild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FieldsMasterId")
                        .HasColumnType("int");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<int>("MasterTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FieldsMasterId");

                    b.HasIndex("MasterTypeId");

                    b.HasIndex("TemplateId");

                    b.ToTable("tblWCMSFieldsMasterChild");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSFieldType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblWCMSFieldType");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSMasterType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblWCMSMasterType");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSProductCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUserDefined")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("tblWCMSProductCategories");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSProductFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FieldTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FieldTypeId");

                    b.ToTable("tblWCMSProductFields");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSTemplatePageFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FieldsMasterId")
                        .HasColumnType("int");

                    b.Property<int>("TemplatePageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FieldsMasterId");

                    b.HasIndex("TemplatePageId");

                    b.ToTable("tblWCMSTemplatePageFields");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSTemplatePages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DisplayPageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("TemplatePageTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.HasIndex("TemplatePageTypeId");

                    b.ToTable("tblWCMSTemplatePages");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSTemplatePageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblWCMSTemplatePageType");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CoverImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoredPathURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblWCMSTemplates");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSUserProductFields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FieldValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBannerField")
                        .HasColumnType("bit");

                    b.Property<int>("ProductFieldsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductFieldsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("tblWCMSUserProductFields");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSUserTemplateDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HasChilds")
                        .HasColumnType("int");

                    b.Property<int>("TemplatePageFieldId")
                        .HasColumnType("int");

                    b.Property<int>("UserTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TemplatePageFieldId");

                    b.HasIndex("UserTemplateId");

                    b.ToTable("tblWCMSUserTemplateDetails");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSUserTemplateDetailsChilds", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<int>("TemplatePageFieldsId")
                        .HasColumnType("int");

                    b.Property<int>("UserTemplateDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TemplatePageFieldsId");

                    b.HasIndex("UserTemplateDetailsId");

                    b.ToTable("tblWCMSUserTemplateDetailsChilds");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSUserTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ColorGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FacebookPixelId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FontGroupId")
                        .HasColumnType("int");

                    b.Property<string>("GATagId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IsPreview")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("TemplateId");

                    b.ToTable("tblWCMSUserTemplates");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSUserTemplatesChild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<int>("UserTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlatformId");

                    b.HasIndex("UserTemplateId");

                    b.ToTable("tblWCMSUserTemplatesChild");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Models.AspNetRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiryOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RevokedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("AspNetRefreshToken", (string)null);
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Models.AspNetUserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserIdId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserIdId");

                    b.ToTable("AspNetUserProfile");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTChatBot", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ChatBot")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTHistory", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.BOTChatBot", "ChatBot")
                        .WithMany()
                        .HasForeignKey("ChatBotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.BOTQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.BOTVisitor", "Visitor")
                        .WithMany("Replies")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatBot");

                    b.Navigation("Question");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTOption", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.BOTQuestion", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTPlatform", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.BOTChatBot", "ChatBot")
                        .WithMany("Platforms")
                        .HasForeignKey("ChatBotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatBot");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTQuestion", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.BOTChatBot", "ChatBot")
                        .WithMany("Questions")
                        .HasForeignKey("ChatBotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.BOTComponent", "ComponentType")
                        .WithMany()
                        .HasForeignKey("ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatBot");

                    b.Navigation("ComponentType");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTQuestionLink", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.BOTQuestion", "Question")
                        .WithMany("Links")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTWebHookResponse", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.BOTVisitor", "BOTVisitors")
                        .WithOne("webHookResponse")
                        .HasForeignKey("WebsiteCMS.DAL.Data.Models.BOTWebHookResponse", "BOTVisitorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BOTVisitors");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTWhatsAppBusinessData", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.BOTChatBot", "ChatBot")
                        .WithMany()
                        .HasForeignKey("ChatBotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatBot");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTWhatsAppTemplates", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.BOTQuestion", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BusinessContactInfo", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.BusinessInfo", "BusinessInfo")
                        .WithOne("ContactInfo")
                        .HasForeignKey("WebsiteCMS.DAL.Data.Models.BusinessContactInfo", "BusinessInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessInfo");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BusinessInfoCategories", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.BusinessCategory", "BusinessCategory")
                        .WithMany("BusinessCategoryList")
                        .HasForeignKey("BusinessCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.BusinessInfo", "BusinessInfo")
                        .WithMany("BusinessCategoryList")
                        .HasForeignKey("BusinessInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessCategory");

                    b.Navigation("BusinessInfo");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BusinessLocationInfo", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.BusinessInfo", "BusinessInfo")
                        .WithOne("LocationInfo")
                        .HasForeignKey("WebsiteCMS.DAL.Data.Models.BusinessLocationInfo", "BusinessInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessInfo");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BusinessPhoneNos", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.BusinessContactInfo", "ContactInfo")
                        .WithMany("UserPhoneNos")
                        .HasForeignKey("ContactInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactInfo");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BusinessServiceArea", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.BusinessInfo", "BusinessInfo")
                        .WithMany("businessServiceAreas")
                        .HasForeignKey("BusinessInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusinessInfo");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.City", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.Countries", "Countries")
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.States", "States")
                        .WithMany("Cities")
                        .HasForeignKey("StatesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Countries");

                    b.Navigation("States");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.FacebookPagesTokens", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.SocialPlatforms", "SocialPlatforms")
                        .WithMany("FacebookPagesTokens")
                        .HasForeignKey("SocialPlatformsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SocialPlatforms");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMCaptions", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMCategory", "SCRMCategory")
                        .WithMany("Captions")
                        .HasForeignKey("SCRMCategoryID");

                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMSubCategory", "SCRMSubCategory")
                        .WithMany("Captions")
                        .HasForeignKey("SCRMSubCategoryId");

                    b.Navigation("SCRMCategory");

                    b.Navigation("SCRMSubCategory");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMSubCategory", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMCategory", "Category")
                        .WithMany("SubCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplate", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMColor", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMLanguage", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplateCategory", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMTemplate", "Template")
                        .WithMany("Category")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplateField", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMTemplateFieldType", "TemplateFieldType")
                        .WithMany("TemplateField")
                        .HasForeignKey("TemplateFieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemplateFieldType");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplateFieldImage", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMTemplateField", "TemplateField")
                        .WithMany()
                        .HasForeignKey("TemplateFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("TemplateField");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplateFieldText", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMAlign", "Align")
                        .WithMany()
                        .HasForeignKey("AlignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMFontFamily", "FontFamily")
                        .WithMany()
                        .HasForeignKey("FontFamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMTemplateField", "TemplateField")
                        .WithMany()
                        .HasForeignKey("TemplateFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Align");

                    b.Navigation("FontFamily");

                    b.Navigation("Template");

                    b.Navigation("TemplateField");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplateSubCategory", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMSubCategory", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMTemplate", "Template")
                        .WithMany("SubCategory")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplateTag", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMTag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMTemplate", "Template")
                        .WithMany("Tags")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMUserCategoryList", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.FacebookPagesTokens", "FBToken")
                        .WithMany("CategoryList")
                        .HasForeignKey("FBTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FBToken");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMUserMetaData", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Models.ApplicationUser", null)
                        .WithMany("SCRMUserMetaData")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.SCRMTemplateField", "TemplateField")
                        .WithMany("UserMetaData")
                        .HasForeignKey("TemplateFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TemplateField");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SocialPlateformWisePosts", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.FacebookPagesTokens", "FacebookPagesTokens")
                        .WithMany("SocialPlateformWisePosts")
                        .HasForeignKey("PageId");

                    b.HasOne("WebsiteCMS.DAL.Data.Models.SocialPlatforms", "SocialPlatforms")
                        .WithMany("SocialPlateformWisePosts")
                        .HasForeignKey("Plateformid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.SociaMediaPost", "SociaMediaPost")
                        .WithMany("SocialPlateformWisePosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacebookPagesTokens");

                    b.Navigation("SociaMediaPost");

                    b.Navigation("SocialPlatforms");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.States", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.Countries", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSCategoryWiseProducts", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSProductCategories", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSFieldsMaster", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSFieldType", "FieldType")
                        .WithMany("FieldsMasters")
                        .HasForeignKey("FieldtypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSMasterType", "MasterType")
                        .WithMany("FieldsMasters")
                        .HasForeignKey("MasterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldType");

                    b.Navigation("MasterType");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSFieldsMasterChild", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSFieldsMaster", "FieldsMaster")
                        .WithMany("TemplateFieldsMaster")
                        .HasForeignKey("FieldsMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSMasterType", "MasterType")
                        .WithMany("TemplateFieldsMaster")
                        .HasForeignKey("MasterTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSTemplates", "Template")
                        .WithMany("TemplateFieldsMasterChild")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldsMaster");

                    b.Navigation("MasterType");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSProductCategories", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSProductFields", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSFieldType", "FieldType")
                        .WithMany()
                        .HasForeignKey("FieldTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldType");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSTemplatePageFields", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSFieldsMaster", "FieldsMaster")
                        .WithMany("TemplatePageFields")
                        .HasForeignKey("FieldsMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSTemplatePages", "TemplatePage")
                        .WithMany("TemplatePageFields")
                        .HasForeignKey("TemplatePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FieldsMaster");

                    b.Navigation("TemplatePage");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSTemplatePages", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSTemplates", "Template")
                        .WithMany("TemplatePages")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSTemplatePageType", "TemplatePageType")
                        .WithMany("TemplatePage")
                        .HasForeignKey("TemplatePageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");

                    b.Navigation("TemplatePageType");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSUserProductFields", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSProductFields", "ProductFields")
                        .WithMany("UserProductFields")
                        .HasForeignKey("ProductFieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSCategoryWiseProducts", "Products")
                        .WithMany("Fields")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductFields");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSUserTemplateDetails", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSTemplatePageFields", "TemplatePageField")
                        .WithMany("UserTemplateDetails")
                        .HasForeignKey("TemplatePageFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSUserTemplates", "UserTemplate")
                        .WithMany("UserTemplateDetails")
                        .HasForeignKey("UserTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TemplatePageField");

                    b.Navigation("UserTemplate");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSUserTemplateDetailsChilds", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSTemplatePageFields", "TemplatePageFields")
                        .WithMany("UserTemplateDetailsChilds")
                        .HasForeignKey("TemplatePageFieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSUserTemplateDetails", "UserTemplateDetails")
                        .WithMany("UserTemplateDetailsChilds")
                        .HasForeignKey("UserTemplateDetailsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TemplatePageFields");

                    b.Navigation("UserTemplateDetails");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSUserTemplates", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Models.ApplicationUser", null)
                        .WithMany("UserTemplates")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSTemplates", "Template")
                        .WithMany("UserTemplates")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSUserTemplatesChild", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Data.Models.SocialPlatforms", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebsiteCMS.DAL.Data.Models.WCMSUserTemplates", "UserTemplate")
                        .WithMany("UserTemplatesChild")
                        .HasForeignKey("UserTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Platform");

                    b.Navigation("UserTemplate");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Models.AspNetRefreshToken", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Models.ApplicationUser", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Models.AspNetUserProfile", b =>
                {
                    b.HasOne("WebsiteCMS.DAL.Models.ApplicationUser", "AppUserId")
                        .WithMany()
                        .HasForeignKey("AppUserIdId");

                    b.Navigation("AppUserId");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTChatBot", b =>
                {
                    b.Navigation("Platforms");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTQuestion", b =>
                {
                    b.Navigation("Links");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BOTVisitor", b =>
                {
                    b.Navigation("Replies");

                    b.Navigation("webHookResponse")
                        .IsRequired();
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BusinessCategory", b =>
                {
                    b.Navigation("BusinessCategoryList");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BusinessContactInfo", b =>
                {
                    b.Navigation("UserPhoneNos");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.BusinessInfo", b =>
                {
                    b.Navigation("BusinessCategoryList");

                    b.Navigation("ContactInfo")
                        .IsRequired();

                    b.Navigation("LocationInfo")
                        .IsRequired();

                    b.Navigation("businessServiceAreas");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.Countries", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.FacebookPagesTokens", b =>
                {
                    b.Navigation("CategoryList");

                    b.Navigation("SocialPlateformWisePosts");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMCategory", b =>
                {
                    b.Navigation("Captions");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMSubCategory", b =>
                {
                    b.Navigation("Captions");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplate", b =>
                {
                    b.Navigation("Category");

                    b.Navigation("SubCategory");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplateField", b =>
                {
                    b.Navigation("UserMetaData");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SCRMTemplateFieldType", b =>
                {
                    b.Navigation("TemplateField");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SocialPlatforms", b =>
                {
                    b.Navigation("FacebookPagesTokens");

                    b.Navigation("SocialPlateformWisePosts");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.SociaMediaPost", b =>
                {
                    b.Navigation("SocialPlateformWisePosts");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.States", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSCategoryWiseProducts", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSFieldsMaster", b =>
                {
                    b.Navigation("TemplateFieldsMaster");

                    b.Navigation("TemplatePageFields");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSFieldType", b =>
                {
                    b.Navigation("FieldsMasters");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSMasterType", b =>
                {
                    b.Navigation("FieldsMasters");

                    b.Navigation("TemplateFieldsMaster");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSProductCategories", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSProductFields", b =>
                {
                    b.Navigation("UserProductFields");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSTemplatePageFields", b =>
                {
                    b.Navigation("UserTemplateDetails");

                    b.Navigation("UserTemplateDetailsChilds");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSTemplatePages", b =>
                {
                    b.Navigation("TemplatePageFields");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSTemplatePageType", b =>
                {
                    b.Navigation("TemplatePage");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSTemplates", b =>
                {
                    b.Navigation("TemplateFieldsMasterChild");

                    b.Navigation("TemplatePages");

                    b.Navigation("UserTemplates");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSUserTemplateDetails", b =>
                {
                    b.Navigation("UserTemplateDetailsChilds");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Data.Models.WCMSUserTemplates", b =>
                {
                    b.Navigation("UserTemplateDetails");

                    b.Navigation("UserTemplatesChild");
                });

            modelBuilder.Entity("WebsiteCMS.DAL.Models.ApplicationUser", b =>
                {
                    b.Navigation("ChatBot");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SCRMUserMetaData");

                    b.Navigation("UserTemplates");
                });
#pragma warning restore 612, 618
        }
    }
}
